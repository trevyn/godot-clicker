name: ci

on:
  push:
  pull_request:

permissions:
  contents: read

jobs:
  assign:
    name: assign build_id
    runs-on: ubuntu-latest

    steps:
      - run: wget https://github.com/trevyn/animal-time/releases/latest/download/animal-time
      - run: chmod +x animal-time
      - run: ./animal-time > build_id
      - run: cat build_id

      - uses: actions/upload-artifact@v4
        with:
          name: build_id
          path: build_id

  build:
    needs: [assign]
    name: build rust ${{ matrix.rust }} ${{ matrix.os }}
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]
        rust: [nightly]

    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4

      - run: cat build_id/build_id

      - run: echo "BUILD_ID=$(cat build_id/build_id)" >> $GITHUB_ENV

      - run: rustup default ${{ matrix.rust }} && rustup update ${{ matrix.rust }}

      - run: sudo apt-get update && sudo apt-get install libgtk-3-dev libasound2-dev
        if: ${{ matrix.os == 'ubuntu-latest' }}

      - run: cargo build --release

      - run: ls
      - run: ls
        working-directory: target
      - run: ls
        working-directory: target/release

      - run: mv target/release/brace brace
        if: ${{ matrix.os != 'windows-latest' }}

      - run: mv target/release/brace.exe brace
        if: ${{ matrix.os == 'windows-latest' }}

      - uses: actions/upload-artifact@v4
        if: ${{ matrix.rust == 'nightly' && matrix.os == 'windows-latest' }}
        with:
          name: Godottest/godottest.exe
          path: brace.exe
          if-no-files-found: error

  publish:
    needs: [build]
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}

    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4

      - name: install steamcmd
        run: |
          echo steam steam/question select "I AGREE" | sudo debconf-set-selections
          echo steam steam/license note '' | sudo debconf-set-selections
          sudo add-apt-repository multiverse
          sudo dpkg --add-architecture i386
          sudo apt update
          sudo apt-get install steamcmd
          mkdir -p ~/Steam/config

      - run: echo "${{ secrets.STEAM_CONFIG_VDF }}" | base64 -d > ~/Steam/config/config.vdf
      - run: sed -i 's/STEAM_APP_ID/${{ secrets.STEAM_APP_ID }}/g' manifest.vdf
      - run: sed -i 's/STEAM_DEPOT/${{ secrets.STEAM_DEPOT }}/g' manifest.vdf
      - run: pwd
      - run: ls
      - run: ls Godottest

      # - run: steamcmd +login ${{ secrets.STEAM_USERNAME }} +run_app_build "$(pwd)/manifest.vdf" +quit
